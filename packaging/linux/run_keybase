#!/usr/bin/env bash

set -e -u -o pipefail

# This is the script responsible for launching keybase on boot on Linux. A
# .desktop file will be created by the service on first launch in
# ~/.config/autostart/ to invoke this script.

# NOTE: This logic is duplicated in systemd_linux.go. If you make changes here,
# keep them in sync.
systemd_running() {
    # First check that systemd is running at all at the system level. See
    # https://www.freedesktop.org/software/systemd/man/sd_booted.html.
    if ! [ -d "/run/systemd/system" ] ; then
        return 1
    fi

    # There are also systems that have systemd running at the system level (so
    # they pass the check above), but not at the user level, for whatever
    # reason. (e.g., centos)
    # Ask the systemd user daemon for its status directly, to be sure
    # it's running. Note that "degraded" just means some service has failed to
    # start -- it could be anything, so we treat it the same as "running". (We
    # have to `|| true` to ignore non-zero exit status errors also for that
    # reason.)
    status="$(systemctl --user is-system-running || true)"
    if [ "$status" = "running" ] || [ "$status" = "degraded" ] ; then
        return 0
    elif [ -z "$status" ] ; then
        echo "WARNING: Couldn't reach the systemd user-level daemon."
        echo "Falling back to non-systemd startup."
        return 1
    else
        echo "WARNING: Systemd reported an unexpected status: $status"
        echo "Falling back to non-systemd startup."
        return 1
    fi
}

# Defaults to true unless KEYBASE_SYSTEMD=0.
wants_systemd() {
    [ "${KEYBASE_SYSTEMD:-1}" != "0" ] && systemd_running
}

write_startup_token() {
  echo "$1" > "$startup_token"
}

# This works no matter how the services were started, because our
# Restart=on-failure configuration won't restart after SIGTERM.
kill_all() {
  if killall Keybase &> /dev/null ; then
    echo Shutting down Keybase GUI...
  fi
  # In case the package upgrade wasn't able to unmount and remove /keybase
  if fusermount -uz /keybase &> /dev/null ; then
    # Remove any existing legacy mount.  This should never happen
    # because it should have already been done by post_install.sh.
    # Just in case, let the user know how to fix it.
    echo Unmounting /keybase. Run `sudo rmdir /keybase; sudo ln -s /opt/keybase/mount-readme /keybase; sudo chown root:root /keybase` and then run this command again.
    exit -1
  fi

  # mountdir may be empty on the initial install, so don't try to unmount
  if [ -n "$mountdir" ]; then
	  # This is redundant in newer versions of kbfsfuse, which catches SIGTERM and
	  # unmounts the filesystem before exiting.
	  if fusermount -uz "$mountdir" &> /dev/null ; then
		echo Unmounting "$mountdir"...
	  fi
  fi

  if killall kbfsfuse &> /dev/null ; then
    echo Unmounting and shutting down kbfsfuse...
  fi
  if killall keybase &> /dev/null ; then
    echo Shutting down keybase service...
  fi

  # There is a race condition where if we try to start the keybase service before
  # the previous process has died, we might fail to lock the pid file and error
  # out. Avoid this by waiting for the lock file to be free, on systems with flock
  # installed.
  lockfile="$runtime_dir/keybased.pid"
  if which flock &> /dev/null && [ -e "$lockfile" ] ; then
    flock "$lockfile" true
  fi
}

start_systemd() {
  echo Starting via systemd...
  systemctl --user import-environment KEYBASE_AUTOSTART

  # The keybase.gui.service unit has keybase.service and kbfs.service as
  # dependencies, so we don't have to list them here. But including them lets
  # us report an error if they fail to start. Also prefer `restart` to `start`
  # so that we don't race against the service shutting down.
  # kbfs.service will attempt to start the redirector, but it isn't an error if
  # it fails to start, which happens if it is disabled.
  systemctl --user restart keybase.service kbfs.service keybase.gui.service
  write_startup_token "systemd"
}

run_redirector_in_background() {
  if ! /usr/bin/keybase --use-root-config-file=true config get --direct --assert-false --assert-ok-on-nil disable-root-redirector; then
    return 0
  fi
  redirector_log="$logdir/keybase.redirector.log"
  # An older version of post_install.sh could have made a redirector log
  # here that's owned by root.  If we can't write to it, then just nuke it
  # and overwrite.
  if [ -e "$redirector_log" ] && [ ! -w "$redirector_log" ]; then
    rm -f "$redirector_log"
  fi
  nohup keybase-redirector /keybase >> "$redirector_log" 2>&1 &
}

start_background() {
  echo Launching keybase service...

  # For system tray icon due to an upstream Electron issue: https://github.com/electron/electron/issues/10887
  # Also exported in systemd environment generators
  export XDG_CURRENT_DESKTOP=Unity

  mkdir -p "$logdir"
  mkdir -p "$runtime_dir"

  # We set the --auto-forked flag here so that updated clients that try to
  # restart this service will know to re-fork it themselves. That's all it does.
  keybase --debug --use-default-log-file service --auto-forked &>> "$logdir/keybase.start.log" &
  echo Mounting the file system...
  run_redirector_in_background
  kbfsfuse -debug -log-to-file &>> "$logdir/keybase.start.log" &
  echo Launching Keybase GUI...
  /opt/keybase/Keybase &>> "$logdir/Keybase.app.log" &
  write_startup_token "background"
}

# Sometimes people get into weird configurations, where the `keybase` binary in
# their PATH isn't what it should be. This can particularly happen on machines
# that used to run an ancient version of Keybase, when it was installed via
# NPM. Detect cases like this and print a warning.
warn_if_weird_path() {
    # Users who know they're doing interesting custom things, and don't want to
    # see this warning, can set KEYBASE_PATH_WARNING=0 in their environment to
    # silence it.
    if [ "${KEYBASE_PATH_WARNING:-}" = "0" ] ; then
        return
    fi
    if [ "$(which keybase)" != "/usr/bin/keybase" ] ; then
        echo "WARNING: Expected the keybase executable to be /usr/bin/keybase, but it's"
        echo "         $(which keybase) instead. Do you have multiple versions installed?"
    fi
}

show_cryptosquirrel() {
  # Magical squirrel produced by https://github.com/erkin/ponysay
  if [ "${KEYBASE_NO_SQUIRREL:-}" != "1" ]; then
    cat /opt/keybase/crypto_squirrel.txt
  fi
}

startup_all() {
  # Do not exit early if the mountdir has not been set yet by the service
  mountdir="$(keybase config get -d -b mountdir || true)"

  logdir="${XDG_CACHE_HOME:-$HOME/.cache}/keybase"
  runtime_dir="${XDG_RUNTIME_DIR:-$HOME/.config}/keybase"
  startup_token="$runtime_dir/startup_mode"

  warn_if_weird_path

  # Always stop any running services. With systemd, we could've decided to just
  # `start` services and no-op if they're already running, however:
  # 1) We still need to handle the case where services started outside systemd
  #    are currently running, and making that totally reliable is tricky.
  # 2) Users have come to expect that run_keybase will restart everything, and
  #    we tell them to do it after updates.
  kill_all

  if wants_systemd ; then
      start_systemd
  else
      start_background
  fi

  echo 'run_keybase: Success!'

  show_cryptosquirrel
}

startup_all
